% ESTIMATION OF Cl
%
%
% Loads only necessary FT Data for chosen manoeuvre, adds mass and balance
% values as well as engine forces and moments and calculates aerodynamic
% coefficients. Modelling and rgegression is done aswell.
%
%
% ZHAW,	Author: David Haber-Zelanto - 03.12.2020.

clear variables
close all

% add all the subfolders in this directory to the path
addpath(genpath('.'));

filterAccels = true;

%% SELECT MANOEUVRES

files = struct('name', {}, 'start', {}, 'end', {});

% files(end+1) = struct('name', ...
%     {'FID_1.MID_73.CG_FWD.Mass_M.Alt_M.S_M.P_M.Mnvr_LevelTurn.mat'}, ...
%     'start', 0, ...
%     'end', 10000);
% 
% files(end+1) = struct('name', ...
%     {'FID_1.MID_74.CG_FWD.Mass_M.Alt_M.S_M.P_M.Mnvr_LevelTurn.mat'}, ...
%     'start', 0, ...
%     'end', 10000);


%% dutch roll

files(end+1) = struct('name', ...
    {'FID_1.MID_85.CG_FWD.Mass_M.Alt_M.S_L.P_M.Mnvr_DutchRoll.mat'}, ...
    'start', 0, ...
    'end', 10000);

files(end+1) = struct('name', ...
    {'FID_1.MID_86.CG_FWD.Mass_M.Alt_M.S_L.P_M.Mnvr_DutchRoll.mat'}, ...
    'start', 0, ...
    'end', 10000);

files(end+1) = struct('name', ...
    {'FID_6.MID_101.CG_AFT.Mass_M.Alt_M.S_H.P_M.Mnvr_DutchRoll.mat'}, ...
    'start', 0, ...
    'end', 10000);

files(end+1) = struct('name', ...
    {'FID_6.MID_1042.CG_AFT.Mass_M.Alt_H.S_L.P_M.Mnvr_DutchRoll.mat'}, ...
    'start', 0, ...
    'end', 10000);

% files(end+1) = struct('name', ...
%     {'FID_7.MID_90.CG_FWD.Mass_M.Alt_M.S_H.P_M.Mnvr_DutchRoll.mat'}, ...
%     'start', 0, ...
%     'end', 10000);
% 
% files(end+1) = struct('name', ...
%     {'FID_7.MID_91.CG_FWD.Mass_M.Alt_H.S_L.P_M.Mnvr_DutchRoll.mat'}, ...
%     'start', 0, ...
%     'end', 10000);

files(end+1) = struct('name', ...
    {'FID_11.MID_94.CG_FWD.Mass_M.Alt_H.S_M.P_M.Mnvr_DutchRoll.mat'}, ...
    'start', 0, ...
    'end', 10000);

files(end+1) = struct('name', ...
    {'FID_11.MID_96.CG_FWD.Mass_M.Alt_H.S_H.P_M.Mnvr_DutchRoll.mat'}, ...
    'start', 0, ...
    'end', 20);

%% spiral check

% files(end+1) = struct('name', ...
%     {'FID_2.MID_149.CG_FWD.Mass_M.Alt_M.S_M.P_M.Mnvr_SpiralCheck.mat'}, ...
%     'start', 0, ...
%     'end', 10000);
% 
% files(end+1) = struct('name', ...
%     {'FID_6.MID_157.CG_AFT.Mass_M.Alt_M.S_M.P_M.Mnvr_SpiralCheck.mat'}, ...
%     'start', 0, ...
%     'end', 10000);
% 
% files(end+1) = struct('name', ...
%     {'FID_7.MID_1501.CG_FWD.Mass_M.Alt_M.S_M.P_M.Mnvr_SpiralCheck.mat'}, ...
%     'start', 0, ...
%     'end', 10000);
% 
% files(end+1) = struct('name', ...
%     {'FID_11.MID_151.CG_FWD.Mass_M.Alt_H.S_M.P_M.Mnvr_SpiralCheck.mat'}, ...
%     'start', 0, ...
%     'end', 10000);
% 
% files(end+1) = struct('name', ...
%     {'FID_11.MID_152.CG_FWD.Mass_M.Alt_H.S_M.P_M.Mnvr_SpiralCheck.mat'}, ...
%     'start', 0, ...
%     'end', 10000);

%% bank to bank roll

files(end+1) = struct('name', ...
    {'FID_1.MID_811.CG_FWD.Mass_M.Alt_M.S_M.P_M.Mnvr_Bank-to-bank-roll.mat'}, ...
    'start', 0, ...
    'end', 10000);

files(end+1) = struct('name', ...
    {'FID_1.MID_812.CG_FWD.Mass_M.Alt_M.S_M.P_M.Mnvr_Bank-to-bank-roll.mat'}, ...
    'start', 0, ...
    'end', 10000);

files(end+1) = struct('name', ...
    {'FID_2.MID_822.CG_FWD.Mass_M.Alt_M.S_M.P_M.Mnvr_Bank-to-bank-roll.mat'}, ...
    'start', 0, ...
    'end', 10000);

files(end+1) = struct('name', ...
    {'FID_6.MID_842.CG_AFT.Mass_M.Alt_M.S_M.P_M.Mnvr_Bank-to-bank-roll.mat'}, ...
    'start', 0, ...
    'end', 10000);

% files(end+1) = struct('name', ...
%     {'FID_7.MID_832.CG_FWD.Mass_M.Alt_M.S_M.P_M.Mnvr_Bank-to-bank-roll.mat'}, ...
%     'start', 0, ...
%     'end', 10000);
% 
% files(end+1) = struct('name', ...
%     {'FID_16.MID_183.CG_FWD.Mass_M.Alt_M.S_M.P_L.Mnvr_Bank-to-bank-roll.mat'}, ...
%     'start', 0, ...
%     'end', 10000);
% 
% files(end+1) = struct('name', ...
%     {'FID_16.MID_185.CG_FWD.Mass_M.Alt_M.S_M.P_H.Mnvr_Bank-to-bank-roll.mat'}, ...
%     'start', 0, ...
%     'end', 10000);

%% FLIGHT TEST DATA + WEIGHT AND BALANCE + ENGINE FORCES AND MOMENTS 

[FT_MData, t , brk] = getData(files);

%% AERODYNAMIC COEFFICIENTS CALCULATION

[FT_MData] = getAeroCoeff(FT_MData,filterAccels);


%% MODELLING
FT_MData.AOS_cg = FT_MData.AOS_cg*pi/180;
FT_MData.Rudder = FT_MData.Rudder*pi/180;
FT_MData.Aileron = FT_MData.Aileron*pi/180;


[theta, FT_MData.Cl_pred] = ols_fit(FT_MData, 'Cl', {'1','AOS_cg','ps','rs','Rudder','Aileron'}); 

%% RESULTS

plotting(t, brk , FT_MData)

% estimation
figure
plot(t,FT_MData.Cl)
hold on
plot(t,FT_MData.Cl_pred)
y=ylim;
plot([brk brk],[y(1) y(2)],'g')
xlabel('t [s]')
ylabel('C_l')
legend('Cl','Cl estimated')
title('REGRESSION')


